# Introduction {#sec-intro .unnumbered}

```{r}
#| echo: false
source("_common.R")
```

Data science is an exciting discipline that allows you to transform raw data into understanding, insight, and knowledge.

数据科学是一门激动人心的学科，它能让你将原始数据转化为理解、洞察和知识。

The goal of "R for Data Science" is to help you learn the most important tools in R that will allow you to do data science efficiently and reproducibly, and to have some fun along the way 😃.

《R 数据科学》的目标是帮助你学习 R 中最重要的工具，这些工具将使你能够高效、可重复地进行数据科学工作，并在此过程中获得一些乐趣 😃。

After reading this book, you'll have the tools to tackle a wide variety of data science challenges using the best parts of R.

读完本书后，你将拥有使用 R 的精华部分来应对各种数据科学挑战的工具。

## What you will learn

Data science is a vast field, and there's no way you can master it all by reading a single book.

数据科学是一个广阔的领域，不可能通过阅读一本书就掌握所有内容。

This book aims to give you a solid foundation in the most important tools and enough knowledge to find the resources to learn more when necessary.

本书旨在为你打下最重要的工具的坚实基础，并提供足够的知识，以便在必要时找到更多学习资源。

Our model of the steps of a typical data science project looks something like @fig-ds-diagram.

我们对典型数据科学项目步骤的模型如 @fig-ds-diagram 所示。

```{r}
#| label: fig-ds-diagram
#| echo: false
#| fig-cap: |
#|   In our model of the data science process, you start with data import
#|   and tidying. Next, you understand your data with an iterative cycle of
#|   transforming, visualizing, and modeling. You finish the process 
#|   by communicating your results to other humans.
#| fig-alt: |
#|   A diagram displaying the data science cycle: Import -> Tidy -> Understand 
#|   (which has the phases Transform -> Visualize -> Model in a cycle) -> 
#|   Communicate. Surrounding all of these is Program.
#| out.width: NULL
knitr::include_graphics("diagrams/data-science/base.png", dpi = 270)
```

First, you must **import** your data into R.

首先，你必须将数据 **导入** (import) 到 R 中。

This typically means that you take data stored in a file, database, or web application programming interface (API) and load it into a data frame in R.

这通常意味着你将存储在文件、数据库或 Web 应用程序编程接口 (API) 中的数据加载到 R 的数据框 (data frame) 中。

If you can't get your data into R, you can't do data science on it!

如果无法将数据导入 R，你就无法对其进行数据科学分析！

Once you've imported your data, it is a good idea to **tidy** it.

导入数据后，最好对其进行 **整理** (tidy)。

Tidying your data means storing it in a consistent form that matches the semantics of the dataset with how it is stored.

整理数据意味着将其以一种一致的形式存储，该形式将数据集的语义与其存储方式相匹配。

In brief, when your data is tidy, each column is a variable and each row is an observation.

简而言之，当你的数据是整洁 (tidy) 的时，每一列都是一个变量，每一行都是一个观测。

Tidy data is important because the consistent structure lets you focus your efforts on answering questions about the data, not fighting to get the data into the right form for different functions.

整洁的数据很重要，因为其一致的结构可以让你专注于回答关于数据的问题，而不是费力地将数据转换为适合不同函数的形式。

Once you have tidy data, a common next step is to **transform** it.

拥有整洁的数据后，通常的下一步是进行 **转换** (transform)。

Transformation includes narrowing in on observations of interest (like all people in one city or all data from the last year), creating new variables that are functions of existing variables (like computing speed from distance and time), and calculating a set of summary statistics (like counts or means).

转换包括筛选出感兴趣的观测（例如，某个城市的所有人或去年的所有数据），根据现有变量创建新变量（例如，根据距离和时间计算速度），以及计算一组摘要统计量（例如，计数或均值）。

Together, tidying and transforming are called **wrangling** because getting your data in a form that's natural to work with often feels like a fight!

整理和转换合在一起被称为 **数据整理** (wrangling)，因为将数据处理成易于使用的形式通常感觉像一场战斗！

Once you have tidy data with the variables you need, there are two main engines of knowledge generation: visualization and modeling.

当你拥有了包含所需变量的整洁数据后，知识生成的两大引擎便是：可视化和建模。

These have complementary strengths and weaknesses, so any real data analysis will iterate between them many times.

这两者各有优缺点，相辅相成，因此任何实际的数据分析都会在它们之间多次迭代。

**Visualization** is a fundamentally human activity.

**可视化** (Visualization) 本质上是一项人类活动。

A good visualization will show you things you did not expect or raise new questions about the data.

好的可视化会向你展示意想不到的情况，或引发关于数据的新问题。

A good visualization might also hint that you're asking the wrong question or that you need to collect different data.

好的可视化也可能暗示你问错了问题，或者你需要收集不同的数据。

Visualizations can surprise you, but they don't scale particularly well because they require a human to interpret them.

可视化可以给你带来惊喜，但它们的可扩展性不是很好，因为它们需要人来解释。

**Models** are complementary tools to visualization.

**模型** (Models) 是可视化的补充工具。

Once you have made your questions sufficiently precise, you can use a model to answer them.

一旦你将问题定义得足够精确，就可以使用模型来回答它们。

Models are fundamentally mathematical or computational tools, so they generally scale well.

模型本质上是数学或计算工具，因此它们通常具有良好的可扩展性。

Even when they don't, it's usually cheaper to buy more computers than it is to buy more brains!

即使它们不具备扩展性，通常购买更多的计算机也比雇佣更多的人脑便宜！

But every model makes assumptions, and by its very nature, a model cannot question its own assumptions.

但是，每个模型都有其假设，而模型本身无法质疑自身的假设。

That means a model cannot fundamentally surprise you.

这意味着模型本质上不会给你带来惊喜。

The last step of data science is **communication**, an absolutely critical part of any data analysis project.

数据科学的最后一步是 **沟通** (communication)，这是任何数据分析项目中都至关重要的部分。

It doesn't matter how well your models and visualization have led you to understand the data unless you can also communicate your results to others.

除非你能够将结果传达给他人，否则无论你的模型和可视化让你对数据有多深的理解，都毫无意义。

Surrounding all these tools is **programming**.

围绕所有这些工具的是 **编程** (programming)。

Programming is a cross-cutting tool that you use in nearly every part of a data science project.

编程是一个贯穿始终的工具，你在数据科学项目的几乎每个部分都会用到它。

You don't need to be an expert programmer to be a successful data scientist, but learning more about programming pays off because becoming a better programmer allows you to automate common tasks and solve new problems with greater ease.

你不需要成为编程专家才能成为一名成功的数据科学家，但学习更多编程知识是值得的，因为成为一名更好的程序员可以让你自动化常规任务，并更轻松地解决新问题。

You'll use these tools in every data science project, but they're not enough for most projects.

你会在每个数据科学项目中使用这些工具，但对于大多数项目来说，这些工具是不够的。

There's a rough 80/20 rule at play: you can tackle about 80% of every project using the tools you'll learn in this book, but you'll need other tools to tackle the remaining 20%.

这里有一个粗略的 80/20 法则：你可以使用本书中学到的工具解决每个项目中大约 80% 的问题，但你需要其他工具来解决剩下的 20%。

Throughout this book, we'll point you to resources where you can learn more.

在本书中，我们将为你指出可以学习更多内容的资源。

## How this book is organized

The previous description of the tools of data science is organized roughly according to the order in which you use them in an analysis (although, of course, you'll iterate through them multiple times).

前面关于数据科学工具的描述大致是按照你在分析中使用的顺序来组织的（当然，你会多次迭代使用它们）。

In our experience, however, learning data importing and tidying first is suboptimal because, 80% of the time, it's routine and boring, and the other 20% of the time, it's weird and frustrating.

然而，根据我们的经验，首先学习数据导入和整理并非最佳选择，因为 80% 的情况下，这个过程是常规且乏味的，而另外 20% 的情况下，它又奇怪又令人沮丧。

That's a bad place to start learning a new subject!

这对于开始学习一个新主题来说不是一个好的起点！

Instead, we'll start with visualization and transformation of data that's already been imported and tidied.

因此，我们将从已导入和整理好的数据的可视化和转换开始。

That way, when you ingest and tidy your own data, your motivation will stay high because you know the pain is worth the effort.

这样，当你处理和整理自己的数据时，你会保持高昂的积极性，因为你知道这些辛苦是值得的。

Within each chapter, we try to adhere to a consistent pattern: start with some motivating examples so you can see the bigger picture, and then dive into the details.

在每一章中，我们都尽量遵循一个一致的模式：从一些激励人心的例子开始，让你看到全局，然后再深入细节。

Each section of the book is paired with exercises to help you practice what you've learned.

本书的每个部分都配有练习，以帮助你实践所学内容。

Although it can be tempting to skip the exercises, there's no better way to learn than by practicing on real problems.

尽管跳过练习很诱人，但没有比通过解决实际问题进行练习更好的学习方法了。

## What you won't learn

There are several important topics that this book doesn't cover.

本书没有涵盖几个重要主题。

We believe it's important to stay ruthlessly focused on the essentials so you can get up and running as quickly as possible.

我们认为，严格专注于基础知识非常重要，这样你才能尽快上手。

That means this book can't cover every important topic.

这意味着本书无法涵盖所有重要主题。

### Modeling

Modeling is super important for data science, but it's a big topic, and unfortunately, we just don't have the space to give it the coverage it deserves here.

建模对于数据科学非常重要，但它是一个很大的主题，不幸的是，我们在这里没有足够的篇幅来给予它应有的介绍。

To learn more about modeling, we highly recommend [Tidy Modeling with R](https://www.tmwr.org) by our colleagues Max Kuhn and Julia Silge.

要了解更多关于建模的知识，我们强烈推荐我们的同事 Max Kuhn 和 Julia Silge 编写的 [《Tidy Modeling with R》](https://www.tmwr.org)。

This book will teach you the tidymodels family of packages, which, as you might guess from the name, share many conventions with the tidyverse packages we use in this book.

这本书将教你 tidymodels 系列包，正如你可能从名字中猜到的那样，它与我们在本书中使用的 tidyverse 包有许多共同的约定。

### Big data

This book proudly and primarily focuses on small, in-memory datasets.

本书主要且自豪地专注于内存中的小型数据集。

This is the right place to start because you can't tackle big data unless you have experience with small data.

这是一个正确的起点，因为如果你没有处理小数据的经验，你就无法处理大数据。

The tools you'll learn throughout the majority of this book will easily handle hundreds of megabytes of data, and with a bit of care, you can typically use them to work with a few gigabytes of data.

你在本书大部分内容中学到的工具可以轻松处理数百兆字节的数据，如果稍加注意，你通常可以使用它们来处理几千兆字节的数据。

We'll also show you how to get data out of databases and parquet files, both of which are often used to store big data.

我们还将向你展示如何从数据库和 parquet 文件中获取数据，这两种文件都常用于存储大数据。

You won't necessarily be able to work with the entire dataset, but that's not a problem because you only need a subset or subsample to answer the question that you're interested in.

你不一定能处理整个数据集，但这不成问题，因为你只需要一个子集或子样本来回答你感兴趣的问题。

If you're routinely working with larger data (10--100 GB, say), we recommend learning more about [data.table](https://github.com/Rdatatable/data.table).

如果你经常处理更大的数据（比如 10-100 GB），我们建议你学习更多关于 [data.table](https://github.com/Rdatatable/data.table) 的知识。

We don't teach it here because it uses a different interface than the tidyverse and requires you to learn some different conventions.

我们在这里不教它，因为它使用了与 tidyverse 不同的接口，并且需要你学习一些不同的约定。

However, it is incredibly faster, and the performance payoff is worth investing some time in learning it if you're working with large data.

然而，它的速度非常快，如果你处理大数据，那么花时间学习它所带来的性能提升是值得的。

### Python, Julia, and friends

In this book, you won't learn anything about Python, Julia, or any other programming language useful for data science.

在本书中，你不会学到任何关于 Python、Julia 或任何其他可用于数据科学的编程语言的知识。

This isn't because we think these tools are bad.

这并不是因为我们认为这些工具不好。

They're not!

它们不是！

And in practice, most data science teams use a mix of languages, often at least R and Python.

在实践中，大多数数据科学团队会混合使用多种语言，通常至少包括 R 和 Python。

But we strongly believe that it's best to master one tool at a time, and R is a great place to start.

但我们坚信，一次掌握一个工具是最好的，而 R 是一个很好的起点。

## Prerequisites

We've made a few assumptions about what you already know to get the most out of this book.

为了让你能从本书中获得最大收益，我们对你已有的知识做了一些假设。

You should be generally numerically literate, and it's helpful if you have some basic programming experience already.

你应该具备基本的数字素养，如果已经有一些基础的编程经验会更有帮助。

If you've never programmed before, you might find [Hands on Programming with R](https://rstudio-education.github.io/hopr/) by Garrett to be a valuable adjunct to this book.

如果你以前从未编程过，你可能会发现 Garrett 编写的 [《Hands on Programming with R》](https://rstudio-education.github.io/hopr/) 是本书的一个有价值的补充。

You need four things to run the code in this book: R, RStudio, a collection of R packages called the **tidyverse**, and a handful of other packages.

你需要四样东西来运行本书中的代码：R、RStudio、一个名为 **tidyverse** 的 R 包集合，以及一些其他包。

Packages are the fundamental units of reproducible R code.

包 (Packages) 是可重现 R 代码的基本单位。

They include reusable functions, documentation that describes how to use them, and sample data.

它们包括可重用的函数、描述如何使用它们的文档以及示例数据。

### R

To download R, go to CRAN, the **c**omprehensive **R** **a**rchive **n**etwork, [https://cloud.r-project.org](https://cloud.r-project.org).

要下载 R，请访问 CRAN (the **c**omprehensive **R** **a**rchive **n**etwork)，网址为 [https://cloud.r-project.org](https://cloud.r-project.org)。

A new major version of R comes out once a year, and there are 2-3 minor releases each year.

R 每年发布一个新的主版本，并且每年有 2-3 个次要版本发布。

It's a good idea to update regularly.

定期更新是个好主意。

Upgrading can be a bit of a hassle, especially for major versions that require you to re-install all your packages, but putting it off only makes it worse.

升级可能有点麻烦，特别是对于需要重新安装所有包的主版本，但拖延只会让情况变得更糟。

We recommend R 4.2.0 or later for this book.

本书推荐使用 R 4.2.0 或更高版本。

### RStudio

RStudio is an integrated development environment, or IDE, for R programming, which you can download from [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/).

RStudio 是一个用于 R 编程的集成开发环境 (IDE)，你可以从 [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/) 下载。

RStudio is updated a couple of times a year, and it will automatically let you know when a new version is out, so there's no need to check back.

RStudio 每年更新几次，当新版本发布时它会自动通知你，所以无需反复检查。

It's a good idea to upgrade regularly to take advantage of the latest and greatest features.

定期升级以利用最新最好的功能是个好主意。

For this book, make sure you have at least RStudio 2022.02.0.

对于本书，请确保你至少拥有 RStudio 2022.02.0 版本。

When you start RStudio, @fig-rstudio-console, you'll see two key regions in the interface: the console pane and the output pane.

当你启动 RStudio 时，如 @fig-rstudio-console 所示，你会在界面中看到两个关键区域：控制台窗格 (console pane) 和输出窗格 (output pane)。

For now, all you need to know is that you type the R code in the console pane and press enter to run it.

目前，你只需要知道在控制台窗格中输入 R 代码并按 Enter 键来运行它。

You'll learn more as we go along![^1]

随着学习的深入，你会学到更多！[^1]

```{r}
#| label: fig-rstudio-console
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   The RStudio IDE has two key regions: type R code in the console pane
#|   on the left, and look for plots in the output pane on the right.
#| fig-alt: |
#|   The RStudio IDE with the panes Console and Output highlighted.
knitr::include_graphics("diagrams/rstudio/console.png", dpi = 270)
```

### The tidyverse

You'll also need to install some R packages.

你还需要安装一些 R 包。

An R **package** is a collection of functions, data, and documentation that extends the capabilities of base R.

R **包** (package) 是一个函数、数据和文档的集合，它扩展了基础 R 的功能。

Using packages is key to the successful use of R.

使用包是成功使用 R 的关键。

The majority of the packages that you will learn in this book are part of the so-called tidyverse.

你在本书中将学到的大部分包都属于所谓的 tidyverse。

All packages in the tidyverse share a common philosophy of data and R programming and are designed to work together.

tidyverse 中的所有包都共享一种通用的数据和 R 编程理念，并且被设计为可以协同工作。

You can install the complete tidyverse with a single line of code:

你可以用一行代码安装完整的 tidyverse：

```{r}
#| eval: false
install.packages("tidyverse")
```

On your computer, type that line of code in the console, and then press enter to run it.

在你的计算机上，在控制台中输入那行代码，然后按 Enter 键运行它。

R will download the packages from CRAN and install them on your computer.

R 将从 CRAN 下载这些包并安装到你的计算机上。

You will not be able to use the functions, objects, or help files in a package until you load it with `library()`.

在使用 `library()` 加载包之前，你将无法使用其中的函数、对象或帮助文件。

Once you have installed a package, you can load it using the `library()` function:

安装包后，你可以使用 `library()` 函数加载它：

```{r}
library(tidyverse)
```

This tells you that tidyverse loads nine packages: dplyr, forcats, ggplot2, lubridate, purrr, readr, stringr, tibble, tidyr.

这会告诉你 tidyverse 加载了九个包：dplyr、forcats、ggplot2、lubridate、purrr、readr、stringr、tibble、tidyr。

These are considered the **core** of the tidyverse because you'll use them in almost every analysis.

这些被认为是 tidyverse 的 **核心**，因为你几乎在每次分析中都会使用它们。

Packages in the tidyverse change fairly frequently.

tidyverse 中的包变化相当频繁。

You can see if updates are available by running `tidyverse_update()`.

你可以运行 `tidyverse_update()` 来查看是否有可用的更新。

### Other packages

There are many other excellent packages that are not part of the tidyverse because they solve problems in a different domain or are designed with a different set of underlying principles.

还有许多其他优秀的包不属于 tidyverse，因为它们解决的是不同领域的问题，或者遵循一套不同的基本原则进行设计。

This doesn't make them better or worse; it just makes them different.

这并不是说它们更好或更差，只是它们不同。

In other words, the complement to the tidyverse is not the messyverse but many other universes of interrelated packages.

换句话说，与 tidyverse 互补的不是 messyverse（混乱宇宙），而是许多其他相互关联的包的宇宙。

As you tackle more data science projects with R, you'll learn new packages and new ways of thinking about data.

随着你用 R 解决更多的数据科学项目，你将学习新的包和新的数据思维方式。

We'll use many packages from outside the tidyverse in this book.
本书中我们将使用许多来自 tidyverse 之外的包。

For example, we'll use the following packages because they provide interesting datasets for us to work with in the process of learning R:

例如，我们将使用以下包，因为它们在我们学习 R 的过程中提供了有趣的数据集供我们使用：

```{r}
#| eval: false
install.packages(
  c("arrow", "babynames", "curl", "duckdb", "gapminder", 
    "ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman", 
    "leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins", 
    "repurrrsive", "tidymodels", "writexl")
  )
```

We'll also use a selection of other packages for one off examples.

我们还将为一些一次性的例子使用一些其他的包。

You don't need to install them now, just remember that whenever you see an error like this:

你现在不需要安装它们，只需记住，当你看到如下错误时：

```{r}
#| eval: false
library(ggrepel)
#> Error in library(ggrepel) : there is no package called ‘ggrepel’
```

You need to run `install.packages("ggrepel")` to install the package.

你需要运行 `install.packages("ggrepel")` 来安装该包。

## Running R code

The previous section showed you several examples of running R code.

上一节向你展示了几个运行 R 代码的例子。

The code in the book looks like this:

书中的代码看起来是这样的：

```{r}
#| eval: true
1 + 2
```

If you run the same code in your local console, it will look like this:

如果你在本地控制台中运行相同的代码，它会看起来像这样：

```         
> 1 + 2
[1] 3
```

There are two main differences.

这里有两个主要区别。

In your console, you type after the `>`, called the **prompt**; we don't show the prompt in the book.

在你的控制台中，你在 `>`（称为 **提示符** (prompt)）后面输入；我们在书中不显示提示符。

In the book, the output is commented out with `#>`; in your console, it appears directly after your code.

在书中，输出用 `#>` 注释掉；在你的控制台中，它直接出现在你的代码之后。

These two differences mean that if you're working with an electronic version of the book, you can easily copy code out of the book and paste it into the console.

这两个区别意味着，如果你使用的是本书的电子版，你可以轻松地从书中复制代码并粘贴到控制台中。

Throughout the book, we use a consistent set of conventions to refer to code:

在整本书中，我们使用一套一致的约定来引用代码：

-   Functions are displayed in a code font and followed by parentheses, like `sum()` or `mean()`.

-   函数以代码字体显示，并后跟括号，如 `sum()` 或 `mean()`。

-   Other R objects (such as data or function arguments) are in a code font, without parentheses, like `flights` or `x`.

-   其他 R 对象（例如数据或函数参数）使用代码字体，不带括号，如 `flights` 或 `x`。

-   Sometimes, to make it clear which package an object comes from, we'll use the package name followed by two colons, like `dplyr::mutate()` or `nycflights13::flights`.
    This is also valid R code.

-   有时，为了明确一个对象来自哪个包，我们会使用包名后跟两个冒号的形式，如 `dplyr::mutate()` 或 `nycflights13::flights`。这也是有效的 R 代码。

## Acknowledgments

This book isn't just the product of Hadley, Mine, and Garrett but is the result of many conversations (in person and online) that we've had with many people in the R community.

本书不仅仅是 Hadley、Mine 和 Garrett 的成果，也是我们与 R 社区中许多人进行多次（面对面和在线）对话的结果。

We're incredibly grateful for all the conversations we've had with y'all; thank you so much!

我们非常感谢与大家进行的所有对话；非常感谢你们！

```{r}
#| eval: false
#| echo: false
library(tidyverse)
contribs_all_json <- gh::gh("/repos/:owner/:repo/contributors",
  owner = "hadley",
  repo = "r4ds",
  .limit = Inf
)
contribs_all <- tibble(
  login = contribs_all_json |> map_chr("login"),
  n = contribs_all_json |> map_int("contributions")
)

contribs_old <- read_csv("contributors.csv", col_types = list())
contribs_new <- contribs_all |> anti_join(contribs_old, by = "login")

# Get info for new contributors
needed_json <- map(
  contribs_new$login, 
  ~ gh::gh("/users/:username", username = .x),
  .progress = TRUE
)
info_new <- tibble(
  login = contribs_new$login,
  name = map_chr(needed_json, "name", .default = NA),
  blog = map_chr(needed_json, "blog", .default = NA)
)
info_old <- contribs_old |> select(login, name, blog)
info_all <- bind_rows(info_old, info_new)

contribs_all <- contribs_all |> 
  left_join(info_all, by = "login") |> 
  mutate(login_lowercase = str_to_lower(login)) |>
  arrange(login_lowercase) |>
  select(-login_lowercase)
write_csv(contribs_all, "contributors.csv")
```


```{r}
#| results: asis
#| echo: false
#| message: false
library(dplyr)
contributors <- readr::read_csv("contributors.csv")
contributors <- contributors |> 
  filter(!login %in% c("hadley", "garrettgman", "mine-cetinkaya-rundel")) |> 
  mutate(
    login = paste0("\\@", login),
    desc = ifelse(is.na(name), login, paste0(name, " (", login, ")"))
  )

cat("This book was written in the open, and many people contributed via pull requests. A special thanks to all ",nrow(contributors), " of you who contributed improvements via GitHub pull requests (in alphabetical order by username): ", sep = "")

cat("本书是公开写成的，许多人通过拉取请求 (pull requests) 做出了贡献。特别感谢所有通过 GitHub 拉取请求（按用户名首字母排序）为本书做出改进的 ",nrow(contributors), " 位贡献者：", sep = "")
cat(paste0(contributors$desc, collapse = ", "))
cat(".\n")
```


## Colophon

An online version of this book is available at [https://r4ds.hadley.nz](https://r4ds.hadley.nz).

本书的在线版本可在 [https://r4ds.hadley.nz](https://r4ds.hadley.nz) 查看。

It will continue to evolve in between reprints of the physical book.

在实体书再版之间，它将继续发展。

The source of the book is available at [https://github.com/hadley/r4ds](https://github.com/hadley/r4ds).

本书的源代码可在 [https://github.com/hadley/r4ds](https://github.com/hadley/r4ds) 找到。

The book is powered by [Quarto](https://quarto.org), which makes it easy to write books that combine text and executable code.

本书由 [Quarto](https://quarto.org) 提供支持，它使得编写结合文本和可执行代码的书籍变得容易。

```{r}
#| eval: false
#| echo: false
#| results: asis
pkgs <- sessioninfo::package_info(
  tidyverse:::tidyverse_packages(),
  dependencies = FALSE
)
df <- tibble(
  package = pkgs$package,
  version = pkgs$ondiskversion,
  source = gsub("@", "\\\\@", pkgs$source)
)
knitr::kable(df, format = "markdown")
```

```{r}
#| include: false
cli:::ruler()
```

[^1]:
    If you'd like a comprehensive overview of all of RStudio's features, see the RStudio User Guide at [https://docs.posit.co/ide/user](https://docs.posit.co/ide/user).
